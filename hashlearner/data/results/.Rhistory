shiny::runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
runApp('Documents/b-statistics/APP')
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
pi
area =  function(r){
return(pi*r^2)
}
area(20)
?rnorm()
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
areas<-sapply(radi,area)
mean(area)
area
area(20)
area =  function(r){
return(pi*r^2)
}
area(20)
areas<-sapply(radi,area)
mean(area)
areas<-sapply(radi,area)
areas
areas<-sapply(radi,area)
mean(area)
mean(1)
mean(as.numeric(area))
area
mean(areas)
area(20)
var(areas)
?var
areas
sd(areas)
area(20)
mean(areas)
areas<-sapply(radi,area)
areas
mean(areas)
area(20)
sqrt(sd(areas))
area(20)
mean(areas)-sqrt(sd(areas))
area(20)
radi
hist(radi)
mean(areas)
mean(areas)-4
area(20)
sqrt(sd(areas))
mean(areas)-sqrt(sd(areas))
#Actual Area
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi
var(radi)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)-16
#Actual Area
area(20)
mean(areas)-16
#Actual Area
area(20)
area =  function(r){
return(pi*r^2)
}
radi<-rnorm(n = 10000, mean = 20,sd=2)
area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
area(20)
mean(areas)-area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 1000000, mean = 20,sd=2)
areas<-sapply(radi,area)
mean(areas)
#Actual Area
area(20)
mean(areas)-area(20)
radi<-rnorm(n = 10000, mean = 20,sd=2)
radi<-rnorm(n = 100000, mean = 20,sd=2)
areas<-sapply(radi,area)
area(20)
mean(areas)-pi*area(20)
mean(areas)-pi*4
area(20)
mean(areas)-pi*4
#1256.363
?par
par(mfrow = c(2,2))
?rgamma
?rchisq
?rf
hist(rnorm(10000,0,1))
hist(rgamma(10000,0,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rgamma(10000,1,1))
rchisq(rnorm(10000,1))
hist(rf(10000,1,2
hist(rnorm(10000,0,1))
hist(rf(10000,1,2 ))
hist(rf(10000,4,2 ))
hist(rf(100,5,2 ))
qf(100,5,2 )
hist(rf(100,5,2 ))
hist(rf(100,5,5 ))
rchisq(rnorm(10000,1))
rchisq(rchisq(10000,1))
hist(rchisq(10000,1))
hist(rgamma(10000,1,1))
hist(rnorm(10000,0,1))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
par(mfrow = c(2,2))
hist(rnorm(10000,0,1))
hist(rgamma(10000,1,1))
hist(rchisq(10000,1))
hist(rf(100,5,5 ))
pchisq(q=100, df=80, ncp = 0, lower.tail = FALSE, log.p = FALSE)
library(keras)
library(magrittr)
library(data.table)
###Cleaning###
sentiment_df<-fread("data/sentiment_raw.csv")
sentiment_df<-sentiment_df[1:10000,]
sentiment_df$ascii<-iconv(sentiment_df$JustText, "latin1", "ASCII", sub="")
sentiment_df$no_repeats<-gsub("([[:alpha:]])\\1{2,}", "\\1", sentiment_df$ascii)
sentiment_df$no_repeats<-gsub("(?<=[\\s])\\s*|^\\s+|\\s+$","",perl=TRUE,sentiment_df$no_repeats)
sentiment_df<-sentiment_df[sapply(gregexpr("\\W+", sentiment_df$no_repeats), length) >1,]
sentiment_df_small<-sentiment_df
load("~/Documents/MAS/418/Hw4/data/cleaning_2.RData")
set.seed(123)
training_index<-sample(1:length(nn_predictors),length(nn_predictors)*.75)
x_train<- nn_predictors
x_test <- nn_predictors[-training_index]
y_train<- sentiment_df_small$Sentiment
y_test <- sentiment_df_small$Sentiment[-training_index]
### Test and Train ###
max_features <- length(factor_list)
maxlen <- 80  # cut texts after this number of words
batch_size <- 32
print('Loading data...\n')
cat(length(x_train), 'train sequences\n')
cat(length(x_test), 'test sequences\n')
print('Pad sequences (samples x time)\n')
x_train <- pad_sequences(x_train, maxlen = maxlen)
x_test <- pad_sequences(x_test, maxlen = maxlen)
cat('x_train shape:', dim(x_train), '\n')
cat('x_test shape:', dim(x_test), '\n')
print('Build model...\n')
model <- keras_model_sequential()
model %>%
layer_embedding(input_dim = max_features, output_dim = 128) %>%
layer_lstm(units = 64, dropout = 0.2, recurrent_dropout = 0.2) %>%
layer_dense(units = 1, activation = 'sigmoid')
# try using different optimizers and different optimizer configs
model %>% compile(
loss = 'binary_crossentropy',
optimizer = 'adam',
metrics = c('accuracy')
)
print('Train...\n')
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = 1,
validation_data = list(x_test, y_test)
)
ggplot
library(ggplot)
install.packages("ggplot")
library(ggplot2)
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Phase)) +
geom_bar(stat="identity") + coord_flip()
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Phase)) +
geom_bar(stat="identity") + coord_flip()
names(iris)
names(mtcars)
view(mtcars)
View(mtcars)
ggplot(mtcars, aes(x=carb, y=mpg, fill=gear))
ggplot(mtcars, aes(x=carb, y=mpg, fill=gear)) +
geom_bar(stat="identity") + coord_flip()
library(mgcv)
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),method = "gam", formula = y ~ s(x))
dsmall
qplot(mpg, disp, data = mtcars, geom = c("point", "smooth"),method = "gam", formula = y ~ s(x))
qplot(mpg, disp, data = mtcars, geom = c("point", "smooth"), formula = y ~ s(x))
qplot(mpg, disp, data = mtcars, geom = c("point", "smooth"))
View(AirPassengers)
austres
LakeHuron
qplot( data = LakeHuron, geom = c("point", "smooth"))
View(LakeHuron)
View(as.data.frame(LakeHuron))
str(LakeHuron)
time(LakeHuron)
lake = data.frame(LakeHuron,time(LakeHuron)
)
names(lake)
?data.frame
lake = data.frame(LakeHuron,time(LakeHuron),names = c("level","time"))
names(lake)
names(lake) = c("level","time")
library(mgcv)
lake = data.frame(LakeHuron,time(LakeHuron))
names(lake) = c("level","time")
qplot(level, time, data = lake, geom = c("point", "smooth"))
qplot(time, level, data = lake, geom = c("point", "smooth"))
as.numeric(LakeHuron)
lake = data.frame(as.numeric(LakeHuron),time(LakeHuron))
names(lake) = c("level","time")
qplot(time, level, data = lake, geom = c("point", "smooth"))
lake = data.frame(LakeHuron,as.numeric(time(LakeHuron)))
names(lake) = c("level","time")
qplot(time, level, data = lake, geom = c("point", "smooth"))
lake = data.frame(as.numeric(LakeHuron),as.numeric(time(LakeHuron)))
names(lake) = c("level","time")
qplot(time, level, data = lake, geom = c("point", "smooth"))
as.numeric(LakeHuron)
as.numeric(time(LakeHuron))
lake = data.frame(as.numeric(LakeHuron)[1:10],as.numeric(time(LakeHuron))[1:10])
lake
lake = data.frame(as.numeric(LakeHuron)[1:10],as.numeric(time(LakeHuron))[1:10])
names(lake) = c("level","time")
qplot(time, level, data = lake, geom = c("point", "smooth"))
n <- 10
d <- data.frame(x = 1:n, y = rnorm(n))
ggplot(d,aes(x,y)) + geom_point() +
geom_line(data=data.frame(spline(d, n=n*10)))
aes
?aes
ggplot(d,aes(x,y))
ggplot(d,aes(x,y)) + geom_point()
geom_line(data=data.frame(spline(d)))
geom_line(data=data.frame(spline(d, n=n)))
geom_line(data=data.frame(spline(d, n=n*10)))
ggplot(d,aes(x,y)) + geom_point() +
geom_line(data=data.frame(spline(d))
)
ggplot(d,aes(x,y)) + geom_point() +
geom_line(data=data.frame(spline(d,n=n)))
ggplot(d,aes(x,y)) + geom_point() +
geom_line(data=data.frame(spline(d,n=n*10)))
install.packages(c("bindrcpp", "boot", "cluster", "codetools", "coin", "colorspace", "curl", "DBI", "deldir", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "glmnet", "glue", "goftest", "h2o", "htmltools", "htmlwidgets", "httpuv", "httr", "keras", "knitr", "lattice", "lme4", "lubridate", "maps", "markdown", "MASS", "Matrix", "mgcv", "mime", "mvtnorm", "nlme", "openssl", "packrat", "party", "plotly", "polyclip", "pROC", "purrr", "R6", "randomForestSRC", "Rcpp", "RcppEigen", "reshape", "reshape2", "reticulate", "rlang", "rmarkdown", "RMySQL", "rpart", "rsconnect", "RSQLite", "rstudioapi", "sandwich", "scales", "shiny", "sp", "spatstat", "splancs", "sqldf", "stringi", "stringr", "survival", "tensorflow", "tibble", "tidyr", "viridis", "withr", "XML", "zoo"))
install.packages(c("bindrcpp", "boot", "cluster", "codetools",
setwd("~/Documents/MAS/thesis/Reinforcement-Learning-Study/hashlearner/data/results")
result_1<-read.csv("results_1.csv",header=TRUE)
result_2<-read.csv("results_2.csv",header=TRUE)
result_3<-read.csv("results_3.csv",header=TRUE)
result_4<-read.csv("results_4.csv",header=TRUE)
result_5<-read.csv("results_5.csv",header=TRUE)
library(magrittr)
result_1<-read.csv("results_1.csv",header=TRUE)
result_2<-read.csv("results_2.csv",header=TRUE)
result_3<-read.csv("results_3.csv",header=TRUE)
result_4<-read.csv("results_4.csv",header=TRUE)
result_5<-read.csv("results_5.csv",header=TRUE)
total_training = data.frame(cbind(result_1$predicted,result_2$predicted,result_3$pre,result_4$predicted,result_5$predicted))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5")
result2_1<-read.csv("results2_1.csv",header=TRUE)
names(result2_1)<-c("expected","predicted_1")
result2_2<-read.csv("results2_2.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_2")
result2_3<-read.csv("results2_3.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_3")
## Performace BaseLine ##
result_table_1 = table(result_1$predicted,result_1$expected)
result_table_2 = table(result_2$predicted,result_2$expected)
result_table_3 = table(result_3$predicted,result_3$expected)
result_table_4 = table(result_4$predicted,result_4$expected)
result_table_5 = table(result_5$predicted,result_5$expected)
sum(diag(result_table_1))
sum(diag(result_table_2))
sum(diag(result_table_3))
sum(diag(result_table_4))
sum(diag(result_table_5))
## Part 1 ##
total_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_2$expected)))
names(total_results) <- c("predicted_1","predicted_2","expected")
result_1<-read.csv("results_1.csv",header=TRUE)
result_2<-read.csv("results_2.csv",header=TRUE)
result_3<-read.csv("results_3.csv",header=TRUE)
result_4<-read.csv("results_4.csv",header=TRUE)
result_5<-read.csv("results_5.csv",header=TRUE)
total_training = data.frame(cbind(result_1$predicted,result_2$predicted,result_3$pre,result_4$predicted,result_5$predicted))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5")
result2_1<-read.csv("results2_1.csv",header=TRUE)
names(result2_1)<-c("expected","predicted_1")
result2_2<-read.csv("results2_2.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_2")
result2_3<-read.csv("results2_3.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_3")
## Performace BaseLine ##
result_table_1 = table(result_1$predicted,result_1$expected)
result_table_2 = table(result_2$predicted,result_2$expected)
result_table_3 = table(result_3$predicted,result_3$expected)
result_table_4 = table(result_4$predicted,result_4$expected)
result_table_5 = table(result_5$predicted,result_5$expected)
sum(diag(result_table_1))
sum(diag(result_table_2))
sum(diag(result_table_3))
sum(diag(result_table_4))
sum(diag(result_table_5))
total_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_2$expected)))
names(total_results)
cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_2$expected))
as.numeric(result2_2$predicted_2)
result2_2<-read.csv("results2_2.csv",header=TRUE)
result2_2
names(result2_2)<-c("expected","predicted_2")
result2_1<-read.csv("results2_1.csv",header=TRUE)
names(result2_1)<-c("expected","predicted_1")
result2_2<-read.csv("results2_2.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_2")
result2_3<-read.csv("results2_3.csv",header=TRUE)
names(result2_3)<-c("expected","predicted_3")
## Performace BaseLine ##
result_table_1 = table(result_1$predicted,result_1$expected)
result_table_2 = table(result_2$predicted,result_2$expected)
result_table_3 = table(result_3$predicted,result_3$expected)
result_table_4 = table(result_4$predicted,result_4$expected)
result_table_5 = table(result_5$predicted,result_5$expected)
## Part 1 ##
total_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_2$expected)))
names(total_results) <- c("predicted_1","predicted_2","expected")
train
subset
?randomForest
require(randomForest)
total_training
head(total_training)
result_5$expected
result_4$expected
result_3$expected
total_training = data.frame(cbind(result_1$predicted,result_2$predicted,result_3$pre,result_4$predicted,result_5$predicted,result_5$expected))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5","expected")
?randomForest
test_random_forest=randomForest(expected ~ . , data = total_training)
test_random_forest
total_training = data.frame(cbind(result_1$predicted,result_2$predicted,result_3$pre,result_4$predicted,result_5$predicted,as.factor(result_5$expected)))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5","expected")
test_random_forest=randomForest(expected ~ . , data = total_training)
test_random_forest=randomForest(expected ~ . , data = total_training, ntrees=100)
test_random_forest
plot(test_random_forest)
test_random_forest=randomForest(expected ~ predicted_1 + predicted_2 + predicted_3 , data = total_training, ntrees=100)
result2_3<-read.csv("results2_3.csv",header=TRUE)
names(result2_3)<-c("expected","predicted_3")
result2_3
total_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_3$predicted_3),as.numeric(result2_2$expected)))
View(total_results)
names(total_results) <- c("predicted_1","predicted_2","predicted_2","expected")
test_random_forest=randomForest(expected ~ predicted_1 + predicted_2 + predicted_3 , data = total_training, ntrees=100)
plot(test_random_forest)
predicted = predict(test_random_forest,test_results)
test_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_3$predicted_3),as.numeric(result2_2$expected)))
names(test_results) <- c("predicted_1","predicted_2","predicted_2","expected")
predicted = predict(test_random_forest,test_results)
predicted = predict(test_random_forest,test_results)
test_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_3$predicted_3),as.numeric(result2_2$expected)))
names(test_results) <- c("predicted_1","predicted_2","predicted_3","expected")
test_results
head(test_results)
predicted = predict(test_random_forest,test_results)
predicted
test_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_3$predicted_3)))
test_results= data.frame(cbind(as.numeric(result2_1$predicted_1),as.numeric(result2_2$predicted_2),as.numeric(result2_3$predicted_3)))
names(test_results) <- c("predicted_1","predicted_2","predicted_3")
test_random_forest=randomForest(expected ~ predicted_1 + predicted_2 + predicted_3 , data = total_training, ntrees=100)
plot(test_random_forest)
predicted = predict(test_random_forest,test_results)
table(predicted,result2_3$expected)
test_results= data.frame(cbind(as.character(result2_1$predicted_1),as.character(result2_2$predicted_2),as.character(result2_3$predicted_3)))
total_training = data.frame(cbind(as.character(result_1$predicted),
as.character(result_2$predicted),
as.character(result_3$predicted),
as.character(result_5$expected)))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5","expected")
result2_1<-read.csv("results2_1.csv",header=TRUE)
names(total_training) = c("predicted_1","predicted_2","predicted_3","expected")
total_training = data.frame(cbind(as.character(result_1$predicted),
as.character(result_2$predicted),
as.character(result_3$predicted),
as.character(result_5$expected)))
total_training = data.frame(cbind(as.character(result_1$predicted),
as.character(result_2$predicted),
as.character(result_3$predicted),
as.character(result_4$predicted),
as.character(result_5$predicted),
as.character(result_5$expected)))
names(total_training) = c("predicted_1","predicted_2","predicted_3","predicted_4","predicted_5","expected")
result2_1<-read.csv("results2_1.csv",header=TRUE)
names(result2_1)<-c("expected","predicted_1")
result2_2<-read.csv("results2_2.csv",header=TRUE)
names(result2_2)<-c("expected","predicted_2")
result2_3<-read.csv("results2_3.csv",header=TRUE)
names(result2_3)<-c("expected","predicted_3")
test_results= data.frame(cbind(as.character(result2_1$predicted_1),
as.character(result2_2$predicted_2),
as.character(result2_3$predicted_3)))
names(test_results) <- c("predicted_1","predicted_2","predicted_3")
## RF ##
test_random_forest=randomForest(expected ~ predicted_1 + predicted_2 + predicted_3 , data = total_training, ntrees=100)
predicted = predict(test_random_forest,test_results)
predicted
table(predicted,result2_3$expected)
diag(results)
results = table(predicted,result2_3$expected)
diag(results)
sum(diag(results))
sum(diag(table(result2_1$predicted_1,result2_1$expected)))
sum(diag(table(result2_1$predicted_1,result2_1$expected)))
sum(diag(table(result2_2$predicted_1,result2_1$expected)))
sum(diag(table(result2_1$predicted_1,result2_1$expected)))
sum(diag(table(result2_2$predicted_2,result2_1$expected)))
sum(diag(table(result2_3$predicted_3,result2_1$expected)))
